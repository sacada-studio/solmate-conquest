name: Unity WebGL Automatic Build ðŸ‘½âœ¨ðŸš€
on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:    
      - 'main'
  workflow_dispatch:
permissions:
  contents: write
  pages: write
  id-token: write
concurrency:
  group: "pages"
  cancel-in-progress: false
jobs:
  build:
    name: Unity Build ðŸ‘½
    runs-on: ubuntu-latest
    steps:
      # Checkout (without LFS)
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
        
      # Git LFS
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v3
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      # # Cache
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      # # Build
      - name: Build project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ vars.TARGET_PLATFORM }}
          buildsPath: ${{ vars.BUILD_PATH }}
          allowDirtyBuild: true
      
      # Check build output structure immediately after build
      - name: Inspect build output structure
        run: |
          echo "Checking immediate build output structure:"
          find ${{ vars.BUILD_PATH }} -type f | sort
          echo "Target platform directory structure:"
          find ${{ vars.BUILD_PATH }}/${{ vars.TARGET_PLATFORM }} -type d | sort
          echo "WebGL build files:"
          ls -la ${{ vars.BUILD_PATH }}/${{ vars.TARGET_PLATFORM }}
          echo "Checking for Build folder:"
          find ${{ vars.BUILD_PATH }} -name "Build" -type d
          if [ -d "${{ vars.BUILD_PATH }}/${{ vars.TARGET_PLATFORM }}/Build" ]; then
            echo "Build folder exists at expected location, contents:"
            ls -la ${{ vars.BUILD_PATH }}/${{ vars.TARGET_PLATFORM }}/Build
          else
            echo "Build folder not found at expected location!"
            echo "Looking for Build folder elsewhere:"
            find ${{ vars.BUILD_PATH }} -name "Build" -type d
          fi
      # Output: Artifact
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ vars.ARTIFACT_NAME }}
          path: ${{ vars.BUILD_PATH }}
      # Deployment
      - name: Stash build result and reset local changes
        run: |
          echo "Applying initial configs"
          sudo chown -R $USER:$USER ${{ vars.BUILD_PATH }}
          git config --global user.email "${{ secrets.GH_EMAIL }}"
          git config --global user.name "${{ secrets.GH_USERNAME }}"
          echo "Stash and reset"
          echo "Stash build result and reset local changes"
          echo "Build path contents before stashing:"
          ls -la ${{ vars.BUILD_PATH }}
          echo "Target platform folder contents:"
          ls -la ${{ vars.BUILD_PATH }}/${{ vars.TARGET_PLATFORM }}
          ls -la ${{ vars.BUILD_PATH }}/${{ vars.TARGET_PLATFORM }}/${{ vars.TARGET_PLATFORM }}
          git add ${{ vars.BUILD_PATH }}/${{ vars.TARGET_PLATFORM }}
          git stash push ${{ vars.BUILD_PATH }}/${{ vars.TARGET_PLATFORM }}
          echo "Stash contents:"
          git stash list
          git stash show -p
          git reset --hard
          sudo git clean -d -x -f
    # Deployment
      - name: Cleaning gh-pages branch
        run: |
          echo "Switch to ${{ vars.DEPLOYMENT_BRANCH }}"
          git switch -f ${{ vars.DEPLOYMENT_BRANCH }}
          git reset --hard
          sudo git clean -d -x -f
          echo "Current files before removal:"
          ls -la
          rm -r *
          echo "solmate.quest" > CNAME
          echo "Files after cleanup:"
          ls -la
          git add .
          git commit -m "cleaning branch"
          git push
      - name: Applying stashed files to ${{ vars.DEPLOYMENT_BRANCH }}
        run: |
          echo "Applying stash"
          git stash apply stash@{0}
          echo "Files after applying stash:"
          git status
          echo "Build path structure after stash apply:"
          find ${{ vars.BUILD_PATH }} -type d | sort
          ls -la ${{ vars.BUILD_PATH }}/${{ vars.TARGET_PLATFORM }}
          ls -la ${{ vars.BUILD_PATH }}/${{ vars.TARGET_PLATFORM }}/${{ vars.TARGET_PLATFORM }}
      - name: Copying files to root directory
        run: |
          cd ${{ vars.BUILD_PATH }}/${{ vars.TARGET_PLATFORM }}/${{ vars.TARGET_PLATFORM }}
          echo "Current directory contents:"
          ls -la
          echo "Full path of current directory:"
          pwd
          echo "Checking directory structure from here:"
          find . -type d | sort
          echo "Checking for Build folder:"
          find . -name "Build" -type d
          
          # Check one level up to see if Build is there
          echo "Checking one directory up:"
          ls -la ..
          find .. -name "Build" -type d
          
          # Check two levels up to see if Build is there
          echo "Checking two directories up:"
          ls -la ../..
          find ../.. -name "Build" -type d
          
          echo "Copying all files to root directory:"
          cp -r * ../../../
          cd ../../../
          echo "Root directory contents after copying:"
          ls -la
      - name: Pushing deployment to gh-pages branch
        run: |
          echo "Current directory:"
          pwd
          echo "Git status before commit:"
          git status
          echo "Listing files in root directory:"
          ls -la
          echo "Listing files in Build directory (if it exists):"
          find . -name "Build" -type d -exec ls -la {} \; || echo "No Build directory found"
          git add .
          git commit -m "Deployment"
          echo "Git status after commit:"
          git status
          git push
          git reset --hard
          sudo git clean -d -x -f